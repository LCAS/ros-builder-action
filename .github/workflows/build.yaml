name: reusable build workflow

on:
  # make this workflow reusable (and only so)
  workflow_call:
    inputs:
      # target names
      ROS_DISTRO:
        type: string
        description: ROS distribution codename to compile for
        required: false # defaults to 'one'
      DEB_DISTRO:
        type: string
        description: The Debian/Ubuntu distribution codename to compile for.
        required: false  # defaults to 'lsb_release -cs'
      ROS_SOURCES:
        type: string
        description: ROS sources to compile. See README.md for details.
        required: false
      COLCON_PKG_SELECTION:
        type: string
        description: colcon package selection arguments
        required: false

      # workflow control
      SKIP_EXISTING:
        type: boolean
        description: Skip building packages already existing in the repository
        required: false
      DOWNLOAD_DEBS:
        type: boolean
        description: Continue building from previous debs artifact?
        required: true
        default: false
      INSTALL_TO_CHROOT:
        type: boolean
        description: Incrementally install built packages within the chroot?
        required: false
      BUILD_TIMEOUT:
        type: number
        description: Cancel build after this time, before github will do (minutes)
        required: false

      # debian package repository options
      EXTRA_DEB_SOURCES:
        type: string
        description: extra debian sources to add to sources.list
        required: false
      INSTALL_GPG_KEYS:
        type: string
        description: code to run for installing GPG keys (for use with EXTRA_DEB_SOURCES)
        required: false
      EXTRA_ROSDEP_SOURCES:
        type: string
        description: path to a rosdep-compatible yaml file specifying custom dependency mappings
        required: false

      # build options
      EXTRA_SBUILD_CONFIG:
        type: string
        description: lines to add to ~/.sbuildrc
        required: false
      EXTRA_SBUILD_OPTS:
        type: string
        description: options to pass to sbuild on commandline
        required: false
      DEB_BUILD_OPTIONS:
        type: string
        description: options used debian/rules
        required: false
      CONTINUE_ON_ERROR:
        type: boolean
        description: Continue building even if some packages already failed
        required: false

      DEBS_PATH:
        type: string
        description: path to store generated .debs in
        required: false

    outputs:
      LATEST_PACKAGE:
        description: Name of the latest package built
        value: ${{ jobs.debs.outputs.LATEST_PACKAGE }}


# Define environment variables from input, from configuration variables, or defaults - in this order!
# All inputs (declared above) are deliberately optional and don't provide an explicit default.
# Thus, if an input is not explicitly provided, we can fall back to the configuration variable here (var.* context).
# This variable context originates from the _calling_ workflow. Finally, a hard-coded default is given.
# https://docs.github.com/en/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows
env:
  DEB_DISTRO: ${{ inputs.DEB_DISTRO || vars.DEB_DISTRO || 'jammy' }}
  ROS_DISTRO: ${{ inputs.ROS_DISTRO || vars.ROS_DISTRO || 'one' }}
  ROS_SOURCES: ${{ inputs.ROS_SOURCES || vars.ROS_SOURCES || '*.repos' }}

  EXTRA_DEB_SOURCES: ${{ inputs.EXTRA_DEB_SOURCES || vars.EXTRA_DEB_SOURCES }}
  INSTALL_GPG_KEYS: ${{ inputs.INSTALL_GPG_KEYS || vars.INSTALL_GPG_KEYS }}
  EXTRA_ROSDEP_SOURCES: ${{ inputs.EXTRA_ROSDEP_SOURCES || vars.EXTRA_ROSDEP_SOURCES }}

  DEBS_PATH: ${{ inputs.DEBS_PATH || vars.DEBS_PATH || '~/debs' }}

concurrency:
  group: ${{ github.workflow }}-build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  debs:
    runs-on: ubuntu-latest
    name: build debs
    outputs:
      LATEST_PACKAGE: ${{ steps.build.outputs.LATEST_PACKAGE }}

    env: # define common environment variables
      CCACHE_DIR: /home/runner/ccache
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: 10
      DEBUG_BASH: ${{ secrets.ACTIONS_STEP_DEBUG && 'true' || 'false' }}

    steps:
      - uses: actions/checkout@v3

      - name: Download debs from previous run
        uses: actions/download-artifact@v3
        if: inputs.DOWNLOAD_DEBS
        continue-on-error: true
        with:
          name: debs
          path: ${{ env.DEBS_PATH }}

      - name: Restore ccache
        id: restore-ccache
        uses: actions/cache/restore@v3
        env:
          CACHE_ID: "ccache-${{ inputs.DEB_DISTRO || vars.DEB_DISTRO }}\
                           -${{ inputs.ROS_DISTRO || vars.ROS_DISTRO }}\
                           -${{ hashFiles(inputs.ROS_SOURCES || vars.ROS_SOURCES) || inputs.ROS_SOURCES || vars.ROS_SOURCES }}"
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ github.run_id }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Build .deb packages
        uses: ubi-agni/ros-builder-action@main
        id: build
        # leave some time for the remaining steps too (github cancels the job after 360 minutes)
        timeout-minutes: ${{ inputs.BUILD_TIMEOUT || vars.BUILD_TIMEOUT || 340 }}
        env:
          COLCON_PKG_SELECTION: ${{ inputs.COLCON_PKG_SELECTION || vars.COLCON_PKG_SELECTION || '' }}
          EXTRA_SBUILD_CONFIG: ${{ inputs.EXTRA_SBUILD_CONFIG || vars.EXTRA_SBUILD_CONFIG }}
          EXTRA_SBUILD_OPTS: ${{ inputs.EXTRA_SBUILD_OPTS || vars.EXTRA_SBUILD_OPTS }}
          DEB_BUILD_OPTIONS: ${{ inputs.DEB_BUILD_OPTIONS || vars.DEB_BUILD_OPTIONS || 'nocheck' }}
          CONTINUE_ON_ERROR: ${{ inputs.CONTINUE_ON_ERROR || vars.CONTINUE_ON_ERROR || false }}
          SKIP_EXISTING: ${{ inputs.SKIP_EXISTING || vars.SKIP_EXISTING || false }}
          INSTALL_TO_CHROOT: ${{ inputs.INSTALL_TO_CHROOT || vars.INSTALL_TO_CHROOT || false }}

      - name: Store ccache
        uses: actions/cache/save@v3
        if: always() # save cache on timeout or cancel too
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.restore-ccache.outputs.cache-primary-key }}

      - name: Upload debs
        uses: actions/upload-artifact@v3
        if: always() # upload on timeout or cancel too
        with:
          name: debs
          path: ${{ env.DEBS_PATH }}
          if-no-files-found: error
